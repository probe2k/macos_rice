;; extends
;; Keywords

((class_definition) @keyword (#set! conceal "Óòû "))

((return_statement) @keyword (#set! conceal "Û∞åë"))
((pass_statement)   @keyword (#set! conceal "Û∞à∫"))
((import_statement) @keyword (#set! conceal "Ó¨©"))
((import_from_statement) @keyword (#set! conceal "Û±Éó"))
((function_definition)    @keyword (#set! conceal "Û∞äï"))  ;; def
((for_statement)    @keyword (#set! conceal "ÔÄû"))  ;; for
((while_statement)  @keyword (#set! conceal "ÔÑê"))  ;; while
((if_statement)     @keyword (#set! conceal "?"))
((else_clause)      @keyword (#set! conceal "!"))
((elif_clause)      @keyword (#set! conceal "¬ø"))
((with_statement)   @keyword (#set! conceal "Ôíæ"))
((try_statement)    @keyword (#set! conceal "Ó≠ß"))
((except_clause)    @keyword (#set! conceal "ÓØû"))
((finally_clause)   @keyword (#set! conceal "Û∞Öê"))
((assert_statement) @keyword (#set! conceal "Û∞ìÜ"))
;;((yield_expression) @keyword (#set! conceal "Û∞ô®"))
((lambda)           @keyword (#set! conceal "ùù∫"))

;; Booleans and None
((true)  @constant.builtin (#set! conceal "Û∞ìÑ"))
((false) @constant.builtin (#set! conceal "Û∞ìÉ"))
((none)  @constant.builtin (#set! conceal "‚àÖ"))

;; Function calls
((call function: (identifier) @function (#eq? @function "print")) (#set! conceal "ÔÄØ"))
((call function: (identifier) @function (#eq? @function "len"))   (#set! conceal "#"))
((call function: (identifier) @function (#eq? @function "range")) (#set! conceal "ÓØ¢"))
((call function: (identifier) @function (#eq? @function "open"))  (#set! conceal "Ôìì"))
((call function: (identifier) @function (#eq? @function "input")) (#set! conceal "ÔÑú"))

;; Built-in modules
;;((dotted_name name: (identifier) @variable (#eq? @variable "math")) (#set! conceal "Ôî™"))
;;((dotted_name name: (identifier) @variable (#eq? @variable "os"))   (#set! conceal "Û∞©¥"))
;;((dotted_name name: (identifier) @variable (#eq? @variable "sys"))  (#set! conceal "ÓØà"))
;;((dotted_name name: (identifier) @variable (#eq? @variable "json")) (#set! conceal "Óòã"))
;;((dotted_name name: (identifier) @variable (#eq? @variable "re"))   (#set! conceal "Ó¨º"))

;; Exceptions
((raise_statement) @keyword (#set! conceal "ÔÅ±"))
((try_statement)   @keyword (#set! conceal "Ó¨¶"))

;; Comments
;; Uncomment if conceal is desired for starting comment character:
((comment) @comment (#set! conceal "Û∞°°"))

;; Additions
;;((comparison_operator operators: "in" @TSOperator) (#set! conceal "Û∞¨∞"))
;;((not_operator "not" @keyword.operator) (#set! conceal "Û∞£§"))
;;((function_definition "->" @operator) (#set! conceal "Óçâ"))
;;((function_definition parameters: (parameters (identifier) @parameter (#eq? @parameter "self"))) (#set! conceal "Û∞∞£"))
;;((attribute object: (identifier) @variable (#eq? @variable "self")) (#set! conceal "Û∞∞£"))
